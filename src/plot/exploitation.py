import numpy as np
import pandas as pd
import plotly.graph_objects as go
from scipy.stats import binom
from ..utils import MODEL_CODES, COLORS, AMINES
import ipywidgets as widgets
from IPython.display import display


def plot_pdf(amine: str, result_path: str):
    results = pd.read_excel(result_path, sheet_name=amine)
    traces = []
    fig = go.FigureWidget()
    for i, model in enumerate(MODEL_CODES):
        n = 0
        k = 0
        x = np.arange(0, 1.001, 0.001)

        for draw in [0, 1]:
            m = f"{model}{draw}"
            df = results[results["Model"] == m]
            n += len(df)
            df = df[df["Score"] > 3]
            k += len(df)
        y = (n + 1) * binom.pmf(k, n, x)
        max_idx = np.argmax(y)
        traces.append(
            go.Scatter(x=x, y=y, name=model, line=dict(color=COLORS[m], width=4))
        )
        if y[max_idx] < 10:
            fig.add_annotation(
                x=x[max_idx], y=y[max_idx], text=model, showarrow=False, yshift=10
            )
    random_selection = {
        "JMXLWMIFDJCGBV-UHFFFAOYSA-N": (96, 15),
        "HJFYRMFYQMIZDG-UHFFFAOYSA-N": (96, 45),
        "NJQKYAASWUGXIT-UHFFFAOYSA-N": (96, 19),
        "ZKRCWINLLKOVCL-UHFFFAOYSA-N": (96, 27),
    }
    x = np.arange(0, 1.001, 0.001)
    n, k = random_selection[amine]
    y = (n + 1) * binom.pmf(k, n, x)
    traces.append(
        go.Scatter(x=x, y=y, name="Random", line=dict(color="black", width=4))
    )

    fig.add_traces(traces)
    fig.update_layout(
        autosize=False, width=1300, height=800,
    )
    # fig.update_xaxes(range=[1.5, 4.5])
    fig.update_yaxes(range=[0, 10])
    # fig.show()
    return fig


class PlotPDFs:
    def __init__(self, result_path: str):
        self.result_path = result_path

    def amine_dropdown_eventhandler(self, change):
        print(change["new"])
        self.fig = plot_pdf(change["new"], self.result_path)

    def plot_all_pdfs(self):
        amines = [(k, v) for k, v in AMINES.items()]
        update_button = widgets.Button(description="Update Plot")
        amine = "ZKRCWINLLKOVCL-UHFFFAOYSA-N"
        amine_dropdown = widgets.Dropdown(
            options=amines, description="Select Amine", value=amine
        )
        amine_dropdown.observe(self.amine_dropdown_eventhandler)
        self.fig = plot_pdf(amine, self.result_path)
        widget = widgets.VBox([widgets.HBox([amine_dropdown, update_button]), self.fig])
        display(widget)
