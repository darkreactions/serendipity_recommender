from collections import defaultdict
from typing import Any

import ipywidgets as widgets
import numpy as np
import pandas as pd
import plotly.graph_objects as go
import scipy
from IPython.display import display
from scipy.stats import binom, bootstrap

from ..utils import AMINES, COLORS, MODEL_CODES, MODEL_SHORT_NAMES


class PlotPDFs:
    def __init__(self, result_path: str):
        self.result_path = result_path

    def amine_dropdown_eventhandler(self, change):
        if change["name"] == "value":
            self.plot_pdf(change["new"], self.result_path, self.fig)

    def plot_all_pdfs(self):
        amines = [(k, v) for k, v in AMINES.items()]
        amine = "ZKRCWINLLKOVCL-UHFFFAOYSA-N"
        amine_dropdown = widgets.Dropdown(
            options=amines, description="Select Amine", value=amine
        )
        amine_dropdown.observe(self.amine_dropdown_eventhandler)
        self.fig = self.plot_pdf(amine, self.result_path)
        widget = widgets.VBox([amine_dropdown, self.fig])
        display(widget)

    def plot_pdf(self, amine: str, result_path: str, fig=None):
        results = pd.read_excel(result_path, sheet_name=amine)
        traces = []

        for i, model in enumerate(MODEL_CODES):
            n = 0
            k = 0
            x = np.arange(0, 1.001, 0.001)

            for draw in [0, 1]:
                m = f"{model}{draw}"
                df = results[results["Model"] == m]
                n += len(df)
                df = df[df["Score"] > 3]
                k += len(df)
            y = (n + 1) * binom.pmf(k, n, x)
            max_idx = np.argmax(y)
            traces.append(
                go.Scatter(x=x, y=y, name=model, line=dict(color=COLORS[m], width=4))
            )
        random_selection = {
            "JMXLWMIFDJCGBV-UHFFFAOYSA-N": (96, 15),
            "HJFYRMFYQMIZDG-UHFFFAOYSA-N": (96, 45),
            "NJQKYAASWUGXIT-UHFFFAOYSA-N": (96, 19),
            "ZKRCWINLLKOVCL-UHFFFAOYSA-N": (96, 27),
        }
        x = np.arange(0, 1.001, 0.001)
        n, k = random_selection[amine]
        y = (n + 1) * binom.pmf(k, n, x)
        traces.append(
            go.Scatter(x=x, y=y, name="Random", line=dict(color="black", width=4))
        )

        if not fig:
            fig = go.FigureWidget()
            fig.add_traces(traces)
        else:
            with fig.batch_update():
                for i, trace in enumerate(traces):
                    fig.data[i].x = trace.x
                    fig.data[i].y = trace.y

        fig.update_layout(
            autosize=False,
            width=1300,
            height=800,
        )
        fig.update_yaxes(range=[0, 11])
        return fig


class Plot3DSuccess:
    def __init__(self, result_path: str):
        self.results = pd.read_excel(
            result_path, sheet_name=None
        )  # , engine="openpyxl")
        amines = [(k, v) for k, v in AMINES.items()]
        amine = "ZKRCWINLLKOVCL-UHFFFAOYSA-N"
        amine_dropdown = widgets.Dropdown(
            options=amines, description="Select Amine", value=amine
        )
        amine_dropdown.observe(self.amine_dropdown_eventhandler)

        self.fig = None
        self.plot_3d_success("ZKRCWINLLKOVCL-UHFFFAOYSA-N", hull=True)
        widget = widgets.VBox([amine_dropdown, self.fig])
        display(widget)

    def amine_dropdown_eventhandler(self, change):
        if change["name"] == "value":
            self.plot_3d_success(change["new"], hull=True, update=True)

    def plot_3d_success(
        self,
        amine: str,
        # result_path: str,
        combine_draws=False,
        hull=False,
        amine_name="Amine",
        score_thresh=3,
        model_codes=None,
        update=False,
    ):
        bg_color = "white"
        traces = []
        results = self.results[amine]

        hull_colors = {
            "ZKRCWINLLKOVCL-UHFFFAOYSA-N": "orange",
            "JMXLWMIFDJCGBV-UHFFFAOYSA-N": "blue",
            "HJFYRMFYQMIZDG-UHFFFAOYSA-N": "cyan",
            "NJQKYAASWUGXIT-UHFFFAOYSA-N": "yellow",
        }
        stateset = pd.read_csv(f"../data/stateset/{amine}/stateset.csv")

        if hull:
            v = np.loadtxt(
                open(f"../data/stateset/{amine}/vertices.csv", "rb"), delimiter=","
            )
            traces.append(
                go.Mesh3d(
                    x=v[:, 0],
                    y=v[:, 1],
                    z=v[:, 2],
                    color=hull_colors[amine],
                    opacity=0.05,
                    alphahull=0,
                )
            )

        if not model_codes:
            model_codes = MODEL_CODES

        for model in model_codes:
            x = []
            y = []
            z = []
            for draw in [1, 0]:
                m = f"{model}{draw}"
                df = results[results["Model"] == m]
                if not combine_draws:
                    x = []
                    y = []
                    z = []
                for i, row in df.iterrows():
                    if row["Score"] > score_thresh:
                        x.append(stateset.loc[row["Index"]]["_rxn_M_inorganic"])
                        y.append(stateset.loc[row["Index"]]["_rxn_M_organic"])
                        z.append(stateset.loc[row["Index"]]["_rxn_M_acid"])
                if not combine_draws:
                    traces.append(
                        go.Scatter3d(
                            x=x,
                            y=y,
                            z=z,
                            name=m,
                            mode="markers",
                            marker={"color": COLORS[m]},
                        )
                    )
            if combine_draws:
                traces.append(
                    go.Scatter3d(
                        x=x,
                        y=y,
                        z=z,
                        name=dict(zip(MODEL_CODES, MODEL_SHORT_NAMES))[model],
                        mode="markers",
                        marker={"color": COLORS[m]},
                    )
                )

        if not self.fig:
            self.fig = go.FigureWidget()

        self.fig.update_layout(
            font_family="Myriad Pro",
            font_size=20,
            # font_family="American Typewriter",
            autosize=False,
            width=800,
            height=800,
            scene=dict(
                xaxis=dict(
                    title="Lead Iodide [PbI2] (M)",
                    range=[0.0, 2.0],
                    showgrid=True,
                    gridwidth=1,
                    gridcolor="black",
                    zerolinecolor="black",
                    backgroundcolor=bg_color,
                    tickfont=dict(size=16),
                ),
                yaxis=dict(
                    title=f"{amine_name} (M)",
                    # title="Amine (M)",
                    range=[0.0, 3],
                    showgrid=True,
                    gridwidth=1,
                    gridcolor="black",
                    zerolinecolor="black",
                    backgroundcolor=bg_color,
                    tickfont=dict(size=16),
                ),
                zaxis=dict(
                    title="Formic Acid [FAH] (M)",
                    range=[0.0, 15],
                    showgrid=True,
                    gridwidth=1,
                    gridcolor="black",
                    zerolinecolor="black",
                    backgroundcolor=bg_color,
                    tickfont=dict(size=16),
                ),
            ),
            paper_bgcolor=bg_color,
        )
        if not update:
            # fig = go.FigureWidget(data=traces)
            self.fig.add_traces(traces)
        else:
            with self.fig.batch_update():
                for i, trace in enumerate(traces):
                    self.fig.data[i].x = trace.x
                    self.fig.data[i].y = trace.y
                    self.fig.data[i].z = trace.z
                    if i == 0:  # If its the hull
                        self.fig.data[i].color = trace.color

        # return self.fig
